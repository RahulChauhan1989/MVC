@model ViewModels.UpdateVendorCoverageViewModel

@{
    ViewBag.Title = "Edit Partner Coverage (" + ViewBag.VendorName + ")";

    string faIcon = string.Format("<i class='fa fa-reply' aria-hidden='true'></i> Back");
    string hyperLink = Html.ActionLink("linkTitle", "ManageVendorCoverages", "Master", new { vid = Model.VendorRowID }, new { @class = "headerbacklink" }).ToString();
    ViewBag.TitleBackBtn = new HtmlString(hyperLink.ToString().Replace("linkTitle", faIcon));
}

@section LeftNavigation{ @Html.Partial("_NavLeftMaster") }
@section DisplayTitle{ @Html.Partial("_DisplayTitle") }
@section DisplayMandatory{ @Html.Partial("_DisplayMandatory") }
@section DisplayErrorMessage{ @Html.Partial("_DisplayErrorMessage") }
<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.VendorCoverageRowID)
            @Html.HiddenFor(model => model.VendorRowID)
            <div class="form-horizontal">
                <div class="form-group branch">
                    @Html.LabelFor(model => model.CheckFamilyRowID, htmlAttributes: new { @class = "col-md-2 control-label  required" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.CheckFamilyRowID,
                            new SelectList(ViewBag.CoverageCheckList, "CheckFamilyRowID", "CheckFamilyName"),
                            "-- Select -- ",
                            new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.CheckFamilyRowID, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.CheckFamilyRowID, new { @id = "hdnCheckFamilyRowID" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.AdditionalCosting, htmlAttributes: new { @class = "col-md-2 control-label" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.AdditionalCosting,
                            new SelectList(ViewBag.AdditionalCostingList, "Value", "Text"),
                            "-- Select -- ",
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AdditionalCosting, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.AdditionalCost, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.AdditionalCost, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return isNumberKey(event,true)", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.AdditionalCost, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.Level1TAT, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.Level1TAT,
                            new SelectList(ViewBag.VarificationTATLevel1, "Text", "Value"),
                            "-- Select --",
                             new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Level1TAT, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Level2TAT, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.Level2TAT,
                            new SelectList(ViewBag.VarificationTATLevel2, "Text", "Value"),
                            "-- Select --",
                             new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Level2TAT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "col-md-2 control-label" })
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @rows = "2" })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.CountryRowID, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.CountryRowID,
                            new SelectList(ViewBag.Countries, "CountryRowID", "CountryName"),
                            "-- Select Country -- ",
                            new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.CountryRowID, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.CountryRowID, new { @id = "hdnCountryRowID" })
                    </div>
                </div>
                <div class="form-group branch">
                  @Html.LabelFor(model => model.StateRowID, htmlAttributes: new { @class = "col-md-2 control-label required" })
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.StateRowID,
                     new SelectList(string.Empty, "Value", "Text"),
                     "-- Select State --", new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.StateRowID, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.StateRowID, new { @id = "hdnStateRowID" })
                </div>
                    @Html.LabelFor(model => model.VendorCost, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.VendorCost, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return isNumberKey(event,true)" } })
                        @Html.ValidationMessageFor(model => model.VendorCost, "", new { @class = "text-danger" })
                    </div>
                </div>
                   <div class="all-button-bg">
                    @Html.ActionLink("Back", "ManageVendorCoverages", "Master", new { vid = Model.VendorRowID }, new { @class = "btn bun-bg btn-default" })
                    <input class="btn bun-bg btn-default" type="submit" onclick="return validateForm()" value="Submit" />
                </div>
            </div>
                                    }
    </div>
</div>

@section Scripts{
    <script src='@Url.Content("~/Scripts/jquery.validate.min.js")'></script>
    <script src='@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")'></script>
    <script src='@Url.Content("~/Scripts/EventValidations.js")'></script>
    <link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script type="text/jscript">
        $(document).ready(function () {
            $.getJSON('/Master/BindState/' + $('#CountryRowID').val(), function (data) {
                var items = '<option value="">-- Select State --</option>';
                $.each(data, function (i, States) {
                    items += "<option value='" + States.Value + "'>" + States.Text + "</option>";
                });
                $('#StateRowID').html(items);
                $('#StateRowID').val($('#hdnStateRowID').val());
            });

            var AdditionalCosting = $('#AdditionalCosting').val();
            if (AdditionalCosting == '1') {
                $('#AdditionalCost').prop("disabled", false);
                $('#AdditionalCost').focus();
            } else {
                $('#AdditionalCost').prop("disabled", true);
            }
           
        });

        $(function () {
            //AdditionalCost enable disable
            $('#AdditionalCosting').change(function () {
                var AdditionalCosting = $('#AdditionalCosting').val();
                if (AdditionalCosting == '1') {
                    $('#AdditionalCost').prop("disabled", false);
                    $('#AdditionalCost').focus();
                } else {
                    $('#AdditionalCost').prop("disabled", true);
                }
            });

            $('#select_all').change(function () {
                $("#dvPartialview input:checkbox").prop('checked', $(this).prop('checked'));
                var DistrictId = '';
                $('input[class="Districtchk"]').each(function (index, value) {
                    if (this.checked) { DistrictId += this.value + ','; }
                });
                if (DistrictId.length > 0) {
                    DistrictId = DistrictId.substring(0, DistrictId.length - 1);
                } else { DistrictId = ''; }
                $('#CoverageDistrictIds').val(DistrictId.trim());
            });
        });
        function validateForm() {
            var AdditionalCosting = $('#AdditionalCosting').val();
            var AdditionalCost = $('#AdditionalCost').val();
            if (AdditionalCosting == '1') {
                if (AdditionalCost == '') {
                    alert("Please enter Additional Cost.");
                    return false;
                }
            }
                       
            return true;
        }

    </script>
}
