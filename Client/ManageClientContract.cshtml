
@{
    ViewBag.Title = "Manage Verification Contract Agreement(" + Convert.ToString(Session["ClientNameForContract"]) + ")";

    string faIcon = string.Format("<i class='fa fa-reply' aria-hidden='true'></i> Back");
    string hyperLink = Html.ActionLink("linkTitle", "ManagePQClient", "Client", null, new { @class = "headerbacklink" }).ToString();
    ViewBag.TitleBackBtn = new HtmlString(hyperLink.ToString().Replace("linkTitle", faIcon));
}
@{
    //@ViewBag.NavigationBtnBack

    //@ViewBag.NavigationBtnAddNew
    string faIconAddNew = string.Format("<i class='fa fa-plus-circle' aria-hidden='true'></i> Upload Contract Agreement");
    string hyperLinkAddNew = Html.ActionLink("linkTitle", "AddClientContract", "Client", new { CId = Request.QueryString["CId"] }, new { @class = "btn bun-bg btn-default" }).ToString();
    ViewBag.NavigationBtnAddNew = new HtmlString(hyperLinkAddNew.ToString().Replace("linkTitle", faIconAddNew));

    //@ViewBag.NavigationBtnExportExcel
    string faIconExportExcel = string.Format("<i class='fa fa-file-excel-o' aria-hidden='true'></i> Export Excel");
    string hyperLinkExportExcel = Html.ActionLink("linkTitle", "ExportClientContract", "Client", new { CId = Request.QueryString["CId"] }, new { @class = "btn bun-bg btn-default" }).ToString();
    ViewBag.NavigationBtnExportExcel = new HtmlString(hyperLinkExportExcel.ToString().Replace("linkTitle", faIconExportExcel));

    ////@ViewBag.NavigationBtnExportWord
    //string faIconExportWord = string.Format("<i class='fa fa-file-excel-o' aria-hidden='true'></i> Export Word");
    //string hyperLinkExportWord = Html.ActionLink("linkTitle", "ExportCountryInWord", "Client", null, new { @class = "btn bun-bg btn-default" }).ToString();
    //ViewBag.NavigationBtnExportWord = new HtmlString(hyperLinkExportWord.ToString().Replace("linkTitle", faIconExportWord));

    ////@ViewBag.NavigationBtnBackExportPDF
    //string faIconExportPDF = string.Format("<i class='fa fa-file-excel-o' aria-hidden='true'></i> Export PDF");
    //string hyperLinkExportPDF = Html.ActionLink("linkTitle", "ExportCountryInPDF", "Client", null, new { @class = "btn bun-bg btn-default" }).ToString();
    //ViewBag.NavigationBtnBackExportPDF = new HtmlString(hyperLinkExportPDF.ToString().Replace("linkTitle", faIconExportPDF));
}
@section LeftNavigation{ @Html.Partial("_NavLeftClient") }
@section DisplayTitle{ @Html.Partial("_DisplayTitle") } 
@{ 
    //For ClientTabs Section
    ViewBag.ClientID = Request.QueryString["CId"];
    ViewBag.ContractCssClass = "current";
    }
@section ClientTabs{ @Html.Partial("_ClientTabs") }
@section NavigationButton{ @Html.Partial("_NavigationButton") }
@section DisplayErrorMessage{ @Html.Partial("_DisplayErrorMessage") }

<div class="row">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-9">
                @using (Html.BeginForm("ManageClientContract", "Client", FormMethod.Get))
                {
                <div class="form-horizontal">
                    <div class="form-group branch search-frame">
                        <label class="col-md-3 control-label">File Name:</label>
                        <div class="col-md-5">
                            @Html.TextBox("Search", null, new { @class = "form-control", placeholder = "Ex. File Name..." })
                        </div>
                        <div class="col-md-2">
                            <input class="btn bun-bg btn-default" type="submit" value="Search" />
                        </div>
                    </div>
                </div>
                }
                @Html.Hidden("CId", new { CId = Request.QueryString["CId"] })
            </div>
            @*<div class="col-md-3 branch search-frame">
                <a href='@Url.Action("AddClientContract","Client", new { CId = Request.QueryString["CId"] })' class="btn bun-bg btn-default">
                    <i class="fa fa-plus-circle" aria-hidden="true">
                    </i>
                    Upload Contract Agreement
                </a>
            </div>*@
        </div>
        @Html.Hidden("Cid", new { CId = Request.QueryString["CId"] }, new { @Id = "hdnCId" })

        @if (Model != null && Model.CContractAgreements != null)
        {
            <div class="row">
                <div class="col-md-12">
                    @{

                        WebGrid grid = new WebGrid(rowsPerPage: Model.PageSize, ajaxUpdateContainerId: "grid");
                        grid.Bind(Model.CContractAgreements, autoSortAndPage: false, rowCount: Model.TotalRecords);
                    }
                    @grid.GetHtml(
                            htmlAttributes: new { id = "grid", @class = "table" },
                            headerStyle: "thead-inverse",
                            rowStyle: "ordertxt",
                            footerStyle: "custpaging",
                            mode: WebGridPagerModes.All,
                            columns: new[]
                            {
                            grid.Column(header: "No.", style:"col-md-0", format: item => item.WebGrid.Rows.IndexOf(item) + 1 + Math.Round(Convert.ToDouble(grid.TotalRowCount / grid.PageCount) / grid.RowsPerPage) * grid.RowsPerPage * grid.PageIndex),
                            grid.Column(columnName: "DocumentType", header: "Document Type", canSort: false, style:"col-md-3"),
                            grid.Column(columnName: "FileName", header: "File Name", canSort: false, style:"col-md-2"),
                            //grid.Column(columnName: "Uploaddate", header: "Upload Date", canSort: true, style:"col-md-2"),
                            grid.Column("Uploaddate", "Upload Date", format: (item) => item.Uploaddate != DateTime.MinValue ? item.Uploaddate.ToString("MM/dd/yyyy") : "", canSort: false,style:"col-md-2"),
                            grid.Column(columnName: "Remarks", header: "Remarks", canSort: false, style:"col-md-3"),

                            //grid.Column(header : "Download", format : (item) => {
                            //    var link = Html.ActionLink("Download", "Download", "Client", new { id = item.FileName }, new { target = "_blank" });
                            //    return link;
                            //}, style:"edit col-md-1"),

                            grid.Column(header: "Active", canSort: false, format: (item) => {
                             string strActive=string.Empty;
                             if (item.Status == 1)
                                {
                                    strActive += "<input name="+ item.ClientContractRowID +" id="+ item.ClientContractRowID +" checked='true' type='checkbox' onchange='adchange(this)' />";
                                }
                             else
                                {
                                    strActive += "<input name="+ item.ClientContractRowID +" id="+ item.ClientContractRowID +" type='checkbox' onchange='adchange(this)' />";
                                }
                                return new HtmlString(strActive);
                         },style:"delete col-md-1"),

                        grid.Column("Download", canSort: false, format: (item)=> {
                                string FldPathDoc = System.Configuration.ConfigurationManager.AppSettings["ClientDocs"].ToString();
                                string DownloadLink = string.Format("<a href=\"{0}\" target=\"_blank\">Download</a>",Url.Content(FldPathDoc + item.FileName));
                            return new HtmlString(DownloadLink);
                        }, style:"delete col-md-1"),
                        }
                    )
                    <div class="total-record">Total Records: @Model.TotalRecords</div>
                </div>
            </div>
                        }
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
       
        function adchange(ChkData) {
            var id = ChkData.id;
            var Cid = hdnCId;
            var checkeds = ChkData.checked;
            var flag = "";
            if (ChkData.checked == true) {
                flag = confirm('Are you sure to Enable this Record ?');
            }
            if (ChkData.checked == false) {
                flag = confirm('Are you sure to Disable this Record ?');
            }
            if (id != "" && flag) {
                $.ajax({
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("ClientContractActive", "Client")',
                    data: { "id": id, "checkeds": checkeds },
                    dataType: "json",
                    beforeSend: function () { },
                    success: function (data) {
                        if (data.result == true) {
                            alert("Record Update Successfully !!");
                            setTimeout(function () { window.location.replace("ManageClientContract?CId=" + Request.QueryString["CId"]); }, 500);
                        }
                        else {
                            alert('There is some error');
                        }
                    }
                });
            }
            else {
                if (ChkData.checked == false) {
                    ChkData.checked = true;
                }
                else {
                    ChkData.checked = false;
                }
            }
        }
    </script>
}




