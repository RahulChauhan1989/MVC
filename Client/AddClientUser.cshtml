@model ViewModels.ClientViewModel.AddPQClientLoginViewModel
@{
    ViewBag.Title = "-Add Client User-";

    string faIcon = string.Format("<i class='fa fa-reply' aria-hidden='true'></i> Back");
    string hyperLink = Html.ActionLink("linkTitle", "ManageClientUser", "Client", null, new { @class = "headerbacklink" }).ToString();
    ViewBag.TitleBackBtn = new HtmlString(hyperLink.ToString().Replace("linkTitle", faIcon));
}

@section LeftNavigation{ @Html.Partial("_NavLeftClient") }
@section DisplayTitle{ @Html.Partial("_DisplayTitle") }
@section DisplayMandatory{ @Html.Partial("_DisplayMandatory") }
@section DisplayErrorMessage{ @Html.Partial("_DisplayErrorMessage") }
<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <div class="form-group branch">
                    @Html.LabelFor(model => model.ClientRowID, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.ClientRowID,
                            new SelectList(ViewBag.Client, "ClientRowID", "ClientName"),
                            "-- Select Client -- ",
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ClientRowID, "", new { @class = "text-danger" })
                    </div>
                   
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.BORowID, htmlAttributes: new { @class = "col-md-2 control-label " })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.BORowID,
                            new SelectList(ViewBag.BranchOfficeList, "BORowID", "BOName"),
                            "-- Select -- ",
                            new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.BORowID, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.CreatedTime, htmlAttributes: new { @class = "col-md-2 control-label " })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.CreatedTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreatedTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.CandidateEmail, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.CandidateEmail, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CandidateEmail, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.DesignationRowID, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.DesignationRowID,
                            new SelectList(ViewBag.ClientDesignations, "DesignationRowID", "DesignationName"),
                            "-- Select Designation -- ",
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DesignationRowID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group branch">
                    @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "col-md-2 control-label required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.UserID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.UPass, htmlAttributes: new { @class = "col-md-2 control-label required " })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.UPass, new { htmlAttributes = new { @class = "form-control ", @type = "password" } })
                        @Html.ValidationMessageFor(model => model.UPass, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="all-button-bg">
                    @Html.ActionLink("Back", "ManageClientUser", "Client", null, new { @class = "btn bun-bg btn-default" })
                    <input class="btn bun-bg btn-default" type="submit" onclick="return validateForm()" value="Submit" />
                </div>
            </div>
        }
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div id="ManageSction" class="product-frame1"></div>
    </div>
</div>
@section Scripts{

    <script src='@Url.Content("~/Scripts/jquery.validate.min.js")'></script>
    <script src='@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")'></script>
    <script src='@Url.Content("~/Scripts/EventValidations.js")'></script>
    <script type="text/javascript">
      function validateForm() {
          if ($('#CandidateEmail').val() == '') {
                alert("Please enter Candidate Email Id.");
                return false;
            }
            return true;
        }       

        $(function () {
            //PinCode Bind
            $('#ClientRowID').change(function () {
                var url = "/Client/GetBranchOfficeNameByid/" + $("#ClientRowID").val();
                $.ajax({
                    url: url,
                    type: 'GET',
                    async: false,
                    dataType: 'json',
                    success: function (BORowID) {
                        $('#BORowID').val(BORowID);
                    }
                });
            });
        });
        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                yearRange: "-66:+10",
                //onClose: function (dateText, inst) {
                //    $(this).datepicker('setDate', new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay));
                //}
            });
        });
    </script>
    <link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <style>
        .ui-datepicker-buttonpane {
            display: none;
        }
    </style>
}
